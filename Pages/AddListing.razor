@page "/AddListing"
@using Model.Model
@using Model.DTOs
@using BlazorWASM.Services.ClientInterfaces
@using System.Data
@inject IListingService listingService
@inject NavigationManager navMgr
@inject IAuthService authService
<h3 class="card-header">Add listing</h3>
<br/>

<AuthorizeView>
<NotAuthorized>
    <div>
        Please login or register to start posting!
    </div>
</NotAuthorized>
<Authorized>
<form class="row gy-2 gx-3 align-items-center">
    <div class="col-auto">Select sale type: </div>
    <div class="col-auto">
        <select class="form-select" aria-label="Default select example" @onchange="show">
            <option value="" disabled selected hidden>Selling type</option>
            <option value="For sale">For sale</option>
            <option value="For rent">For rent</option>
        </select>
    </div>
    <div class="col-auto">Select property type: </div>
    <div class="col-auto">
        <select class="form-select" aria-label="Default select example" @onchange="show">
            <option value="" disabled selected hidden>Property type</option>
            <option value="House">House</option>
            <option value="Apartment">Apartment</option>
        </select>
    </div>
</form>

<br/>
<hr/>

<form hidden="@initialHide">
<div class="row g-4 mb-4">
    <div class="col-auto">
        <div class="form-outline">
            <input type="text" id="street" class="form-control" @bind="Street"/>
            <label class="form-label" for="street">Street</label>
            
        </div>
    </div>
    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="postNumber" class="form-control" @bind="PostNumber"/>
            <label class="form-label" for="postNumber">Post number</label>
        </div>
        
    </div>
    <div class="col-auto">
        <div class="form-out">
            <input type="text" id="city" class="form-control" @bind="City"/>
            <label class="form-label" for="city">City</label>
        </div>
        
    </div>
    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="houseNo" class="form-control" @bind="HouseNumber"/>
            <label class="form-label" for="houseNo">House no</label>
        </div>
        
    </div>
</div>
<div class="form-outline mb-4">
    <textarea class="form-control" id="form6Example7" rows="4" @bind="Description"></textarea>
    <label class="form-label" for="form6Example7">Description</label>
</div>




<div class="row g-4 mb-4" hidden="@hideforSale">
    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="price" class="form-control" @bind="Price"/>
            <label class="form-label" for="price">Price</label>
        </div>
        
    </div>

</div>


<div class="row g-4 mb-4" hidden="@hideforRent">
    <div class="col-auto">
        <input type="number" id="rent" class="form-control"/>
        <label class="form-label" for="rent">Monthly rent</label>
    </div>
    

    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="deposit" class="form-control" @bind="Deposit"/>
            <label class="form-label" for="deposit">Deposit</label>
        </div>
       
    </div>
</div>


<div class="row g-4 mb-4" hidden="@hideHouse">
    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="year" class="form-control" @bind="YearOfConstruction"/>
            <label class="form-label" for="year">Year built</label>
        </div>
        
    </div>
    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="year1" class="form-control" @bind="YearOfLastRenovation"/>
            <label class="form-label" for="year1">Last rebuilt</label>
        </div>
        
    </div>
    <div class="col-auto">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="inspection" @bind="HasInspection"/>
            <label class="form-check-label" for="inspection">
                Has inspection
            </label>
        </div>
    </div>
</div>


<div class="row g-4 mb-4" hidden="@hideHouse">
    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="area1" class="form-control" @bind="GroundArea"/>
            <label class="form-label" for="area1">Ground area</label>
        </div>
        
    </div>
    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="area2" class="form-control" @bind="FloorArea"/>
            <label class="form-label" for="area2">Floor area</label>
        </div>
        
    </div>
</div>


<div class="row g-4 mb-4" hidden="@hideApartment">
    <div class="col-auto">
        <div class="form-outline">
            <input type="number" id="bedrooms" class="form-control" @bind="Bedrooms"/>
            <label class="form-label" for="houseNo">Bedrooms</label>
        </div>
        
    </div>
    <div class="col-auto">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="pets" @bind="Pets"/>
            <label class="form-check-label" for="pets">
                Pets allowed
            </label>
        </div>
    </div>
    <div class="col-auto">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" id="furnished" @bind="Furnished"/>
            <label class="form-check-label" for="furnished">
                Furnished
            </label>
        </div>
    </div>

</div>
</form>


<!-- images-->
<label hidden="@initialHide">@imagesMessage</label>
<div class="input-group mb-3" hidden="@initialHide">
    <div class="custom">
        <InputFile class="form-control" multiple OnChange="ImageChange" accept="image/png, image/jpeg, image/gif" id="inputFile"/>
    </div>
    <div class="input-group-append">
        <button class="btn btn-success" @onclick="Upload" disabled="@isDisabled">Upload</button>
    </div>
</div>
@foreach (var item in filesBase64)
{
    <img src="data:@item.contentType;base64,@item.base64data"/>
}

@if (!string.IsNullOrEmpty(errorLabel))
        {
            <div class="field">
                <label style="color: red">
                    @errorLabel
                </label>
            </div>
        }
<button type="submit" class="btn btn-primary" @onclick="PublishListing">Submit</button>
</Authorized>
</AuthorizeView>
@code {
    List<ImageFile> filesBase64 = new List<ImageFile>();
    List<ImageFile> images = new List<ImageFile>();

    string imagesMessage = "Upload images";


    bool isDisabled = false;
    bool initialHide = true;
    bool hideforSale = true;
    bool hideforRent = true;
    bool hideHouse = true;
    bool hideApartment = true;
    private string errorLabel;
    
    string Description; 
    string SellingType;
    string PropertyType;
    string Street;
    string City;
    int PostNumber;
    int HouseNumber;
    //house
    int Price;
    int GroundArea;
    int FloorArea;
    int YearOfConstruction;
    int YearOfLastRenovation;
    bool HasInspection;
    //apartment
    int Rent;
    int ApartmentArea;
    int Deposit;
    int Bedrooms;
    bool Pets;
    bool Furnished;
    
    
    void show(ChangeEventArgs e)
    {
        initialHide = false;
        if (e.Value.ToString().Equals("For sale"))
        {
            SellingType = "For sale";
            hideforSale = false;
            hideforRent = true;
        }
        else if (e.Value.ToString().Equals("For rent"))
        {
            SellingType = "For rent";
            hideforSale = true;
            hideforRent = false;
        }
        else if (e.Value.ToString().Equals("House"))
        {
            PropertyType = "House";
            hideHouse = false;
            hideApartment = true;
        }
        else if (e.Value.ToString().Equals("Apartment"))
        {
            PropertyType = "Apartment";
            hideHouse = true;
            hideApartment = false;
        }
    }


    async Task ImageChange(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            filesBase64.Add(new ImageFile ( Convert.ToBase64String(buf),file.ContentType, file.Name ));
        }
    }

    async Task Upload()
    {
        isDisabled = true;
        images.AddRange(filesBase64);
        filesBase64.Clear();
        imagesMessage = $"{images.Count} images uploaded";
        isDisabled = false;
    }

    async Task PublishListing(MouseEventArgs mouseEventArgs)
    {
        
        HouseListingCreationDTO dto = new HouseListingCreationDTO(new Address(Street, PostNumber, City, HouseNumber), YearOfConstruction, YearOfLastRenovation, 
            HasInspection,GroundArea,FloorArea, images, Price, Description,authService.GetCurrentEmail() );
        
        HouseListing listing= await listingService.CreateListing(dto);
        
        navMgr.NavigateTo("/ViewListing/"+listing.id);
    }
    public bool checkInfo()
    {
        if (Street.Equals("") || !isString(Street))
        {
            errorLabel = "Street invalid";
            return false;
        }
        if (PostNumber==0)
        {
            errorLabel = "Post number invalid";
            return false;
        }
        
        if (City.Equals("") || !isString(City))
        {
            errorLabel = "City invalid";
            return false;
        }
        
        if (HouseNumber==0)
        {
            errorLabel = "House number invalid";
            return false;
        }
        
        if (YearOfConstruction<0)
        {
            errorLabel = "Year of construction needs to be higher than 0";
            return false;
        }
        
        if (YearOfLastRenovation<YearOfConstruction)
        {
            errorLabel = "Year of last renovation needs to be higher than year of construction";
            return false;
        }
        
        if (GroundArea<0)
        {
            errorLabel = "Ground area needs to be higher than 0";
            return false;
        }
        
        if (FloorArea<0 || FloorArea>GroundArea)
        {
            errorLabel = "Floor area needs to be higher than 0 and smaller than Floor area";
            return false;
        }
        
        if (Price<0)
        {
            errorLabel = "Price needs to be higher than 0";
            return false;
        }
        return true;

    }

    public bool isString(string input)
    {
        return input.All(Char.IsLetter);
    }
    
}